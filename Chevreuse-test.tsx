/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 --shadows --types .\public\models\tracks\chevreuse-test.glb 
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    ['pylon(Clone)']: THREE.Mesh
    ['pylon(Clone)001']: THREE.Mesh
    ['pylon(Clone)003']: THREE.Mesh
    ['pylon(Clone)002']: THREE.Mesh
    ['pylon(Clone)004']: THREE.Mesh
    ['pylon(Clone)005']: THREE.Mesh
    Mesh_overheadLights: THREE.Mesh
    Mesh_overheadLights_1: THREE.Mesh
    Mesh_overheadLights_2: THREE.Mesh
    Mesh_tentRoofDouble: THREE.Mesh
    Mesh_tentRoofDouble_1: THREE.Mesh
    Mesh_tentRoofDouble001: THREE.Mesh
    Mesh_tentRoofDouble001_1: THREE.Mesh
    Mesh_camera_exclusive: THREE.Mesh
    Mesh_camera_exclusive_1: THREE.Mesh
    Mesh_camera_exclusive_2: THREE.Mesh
    Mesh_billboard: THREE.Mesh
    Mesh_billboard_1: THREE.Mesh
    Mesh_billboard_2: THREE.Mesh
    Mesh_billboard_3: THREE.Mesh
    Mesh_noExport: THREE.Mesh
    Mesh_noExport_1: THREE.Mesh
    Mesh_noExport_2: THREE.Mesh
    Mesh_noExport_3: THREE.Mesh
    Mesh_noExport_4: THREE.Mesh
    Mesh_billboard001: THREE.Mesh
    Mesh_billboard001_1: THREE.Mesh
    Mesh_billboard001_2: THREE.Mesh
    Mesh_billboard001_3: THREE.Mesh
    Mesh_billboard003: THREE.Mesh
    Mesh_billboard003_1: THREE.Mesh
    Mesh_billboard003_2: THREE.Mesh
    Mesh_billboard003_3: THREE.Mesh
    Circle: THREE.Mesh
    Cube_1: THREE.Mesh
    Cube_2: THREE.Mesh
    Cube001: THREE.Mesh
    Cube001_1: THREE.Mesh
    Cube002_1: THREE.Mesh
    Cube002_2: THREE.Mesh
    Plane: THREE.Mesh
    road: THREE.Mesh
  }
  materials: {
    pylon: THREE.MeshStandardMaterial
    grey: THREE.MeshStandardMaterial
    road: THREE.MeshStandardMaterial
    red: THREE.MeshStandardMaterial
    grass: THREE.MeshStandardMaterial
    ['grey.001']: THREE.MeshStandardMaterial
    ['road.001']: THREE.MeshStandardMaterial
    ['grey.002']: THREE.MeshStandardMaterial
    _defaultMat: THREE.MeshStandardMaterial
    ['bark.001']: THREE.MeshStandardMaterial
    bark: THREE.MeshStandardMaterial
    tankco: THREE.MeshStandardMaterial
    ['tankco.001']: THREE.MeshStandardMaterial
    ['grey.003']: THREE.MeshStandardMaterial
    ['road.002']: THREE.MeshStandardMaterial
    ['bark.002']: THREE.MeshStandardMaterial
    ['tankco.002']: THREE.MeshStandardMaterial
    ['_defaultMat.001']: THREE.MeshStandardMaterial
    ['tankco.003']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
    Material: THREE.MeshStandardMaterial
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.003']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/chevreuse-test.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes['pylon(Clone)'].geometry} material={materials.pylon} position={[-0.447, -0.45, 5.549]} scale={0.593} />
      <mesh castShadow receiveShadow geometry={nodes['pylon(Clone)001'].geometry} material={materials.pylon} position={[-0.447, -0.45, 6.572]} scale={0.593} />
      <mesh castShadow receiveShadow geometry={nodes['pylon(Clone)003'].geometry} material={materials.pylon} position={[-0.447, -0.45, 7.594]} scale={0.593} />
      <mesh castShadow receiveShadow geometry={nodes['pylon(Clone)002'].geometry} material={materials.pylon} position={[0.077, -0.45, 5.549]} scale={0.593} />
      <mesh castShadow receiveShadow geometry={nodes['pylon(Clone)004'].geometry} material={materials.pylon} position={[0.077, -0.45, 6.572]} scale={0.593} />
      <mesh castShadow receiveShadow geometry={nodes['pylon(Clone)005'].geometry} material={materials.pylon} position={[0.077, -0.45, 7.594]} scale={0.593} />
      <group position={[0.645, -0.499, 3.772]} rotation={[Math.PI, 0, Math.PI]} scale={1.687}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_overheadLights.geometry} material={materials.grey} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_overheadLights_1.geometry} material={materials.road} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_overheadLights_2.geometry} material={materials.red} />
      </group>
      <group position={[-1.607, -0.514, 13.144]} rotation={[0, 1.571, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_tentRoofDouble.geometry} material={materials.grass} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_tentRoofDouble_1.geometry} material={materials['grey.001']} />
      </group>
      <group position={[-1.607, -0.514, 12.02]} rotation={[0, 1.571, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_tentRoofDouble001.geometry} material={materials.grass} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_tentRoofDouble001_1.geometry} material={materials['grey.001']} />
      </group>
      <group position={[0.598, -0.505, 6.591]} rotation={[Math.PI, -0.284, Math.PI]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_camera_exclusive.geometry} material={materials['road.001']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_camera_exclusive_1.geometry} material={materials['grey.002']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_camera_exclusive_2.geometry} material={materials._defaultMat} />
      </group>
      <group position={[1.566, -0.505, 9.608]} rotation={[Math.PI, -0.204, Math.PI]} scale={0.686}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard.geometry} material={materials['bark.001']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard_1.geometry} material={materials.bark} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard_2.geometry} material={materials.tankco} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard_3.geometry} material={materials['tankco.001']} />
      </group>
      <group position={[1.264, -0.478, 12.209]} rotation={[Math.PI, -0.369, Math.PI]}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_noExport.geometry} material={materials['grey.003']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_noExport_1.geometry} material={materials['road.002']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_noExport_2.geometry} material={materials['bark.002']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_noExport_3.geometry} material={materials['tankco.002']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_noExport_4.geometry} material={materials['_defaultMat.001']} />
      </group>
      <group position={[1.566, -0.505, 9.608]} rotation={[Math.PI, -0.204, Math.PI]} scale={0.686}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard001.geometry} material={materials['bark.001']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard001_1.geometry} material={materials.bark} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard001_2.geometry} material={materials.tankco} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard001_3.geometry} material={materials['tankco.001']} />
      </group>
      <group position={[-5.053, -0.505, 26.873]} rotation={[Math.PI, -1.518, 0]} scale={-0.686}>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard003.geometry} material={materials['bark.001']} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard003_1.geometry} material={materials.bark} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard003_2.geometry} material={materials.tankco} />
        <mesh castShadow receiveShadow geometry={nodes.Mesh_billboard003_3.geometry} material={materials['tankco.001']} />
      </group>
      <mesh castShadow receiveShadow geometry={nodes.Circle.geometry} material={nodes.Circle.material} position={[0.073, -0.51, 24.103]} scale={0.113} />
      <group position={[0.073, -0.178, 24.103]} scale={0.147}>
        <mesh castShadow receiveShadow geometry={nodes.Cube_1.geometry} material={materials['tankco.003']} />
        <mesh castShadow receiveShadow geometry={nodes.Cube_2.geometry} material={materials['Material.001']} />
      </group>
      <group position={[-0.637, -0.395, 3.63]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube001.geometry} material={materials.Material} />
        <mesh castShadow receiveShadow geometry={nodes.Cube001_1.geometry} material={materials['Material.002']} />
      </group>
      <group position={[0.26, -0.395, 3.63]} rotation={[-Math.PI, 0, 0]} scale={-1}>
        <mesh castShadow receiveShadow geometry={nodes.Cube002_1.geometry} material={materials.Material} />
        <mesh castShadow receiveShadow geometry={nodes.Cube002_2.geometry} material={materials['Material.002']} />
      </group>
      <mesh castShadow receiveShadow geometry={nodes.Plane.geometry} material={materials['Material.003']} position={[-0.289, -5.985, 2.8]} scale={[1, 0.511, 1]} />
      <mesh castShadow receiveShadow geometry={nodes.road.geometry} material={nodes.road.material} position={[-33, 0, 89]} />
    </group>
  )
}

useGLTF.preload('/chevreuse-test.glb')
